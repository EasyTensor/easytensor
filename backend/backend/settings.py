"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import logging
import stripe

LOGGER = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


def get_env_var(var_name, default=None):
    """
    Gets an environment variable name or raises an exception
    if it's not present.
    """
    var = os.getenv(var_name)
    if var is None:
        if default is not None:
            LOGGER.warn(
                "Environment variable %s not found. Defaulting to %s", var_name, default
            )
            var = default
        else:
            raise Exception(f"Variable {var_name} is not defined in the environment")
    return var


# SECURITY WARNING: don't run with debug turned on in production!
DEPLOYMENT_ENV = os.getenv("DEPLOYMENT_ENV", default="PROD")
DEBUG = True if DEPLOYMENT_ENV == "DEV" else False
EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend"
    if DEPLOYMENT_ENV == "DEV"
    else "django.core.mail.backends.smtp.EmailBackend"
)


def is_in_dev():
    return DEPLOYMENT_ENV == "DEV"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if is_in_dev():
    SECRET_KEY = "dev"
    JWT_SECRET = "dev"
else:
    SECRET_KEY_FILE = get_env_var("DJANGO_SECRET_FILE_PATH")
    with open(SECRET_KEY_FILE) as fin:
        SECRET_KEY = fin.read()

    JWT_SECRET_FILE = get_env_var("JWT_SECRET_FILE_PATH")
    with open(JWT_SECRET_FILE) as fin:
        JWT_SECRET = fin.read()


STRIPE_API_KEY = get_env_var("STRIPE_API_KEY")
stripe.api_key = STRIPE_API_KEY


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "SIGNING_KEY": JWT_SECRET,
}

# authentication settings
REST_USE_JWT = True
JWT_AUTH_COOKIE = "jwt-auth"
# TODO: maybe switch JWT to be httponly, and figure out CORS
JWT_AUTH_HTTPONLY = False
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_REQUIRED = True
DEFAULT_FROM_EMAIL = "kamal@easytensor.com"
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""
FRONTEND_REDIRECT_URL = get_env_var("FRONTEND_REDIRECT_URL")


#  Email setup
EMAIL_HOST = get_env_var("EMAIL_SERVER")
EMAIL_PORT = get_env_var("EMAIL_PORT")
EMAIL_HOST_USER = get_env_var("EMAIL_USER")
EMAIL_HOST_PASSWORD = get_env_var("EMAIL_PASSWORD")
EMAIL_USE_TLS = True

# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "uploads.apps.UploadsConfig",
    "payments.apps.PaymentsConfig",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "drf_yasg",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "backend/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_env_var("DATABASE_NAME", "django_default"),
        "USER": get_env_var("DATABASE_USER", "postgres"),
        "PASSWORD": get_env_var("DATABASE_PASSWORD", "password"),
        "HOST": get_env_var("DATABASE_HOST", "localhost"),
        "PORT": get_env_var("DATABASE_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

# additions
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
APPEND_SLASH = False
