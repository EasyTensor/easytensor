apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-frontend
  labels:
    app: easytensor
    service: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
  template:
    metadata:
      labels:
        app: easytensor
        service: frontend
    spec:
      containers:
        - name: frontend
          image: easytensor/frontend
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: easytensor
    service: frontend
  ports:
    - protocol: TCP
      port: 3000
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
      service: backend
  template:
    metadata:
      labels:
        app: easytensor
        service: backend
    spec:
      containers:
        - name: backend
          image: easytensor/backend
          ports:
            - name: http
              containerPort: 8000
          livenessProbe:
            httpGet:
              path: /v1/health_check/
              port: http
            failureThreshold: 1
            periodSeconds: 10
            initialDelaySeconds: 180
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: gsa
              mountPath: "/app/gsa"
              readOnly: true
            - name: django-secret
              mountPath: "/app/secrets/django"
              readOnly: true
            - name: jwt-secret
              mountPath: "/app/secrets/jwt"
              readOnly: true
          envFrom:
            - configMapRef:
                name: backend-properties
            - secretRef:
                name: database-properties
            - configMapRef:
                name: service-routing
            - secretRef:
                name: email-properties
            - secretRef:
                name: stripe-properties
      volumes:
        - name: gsa
          secret:
            secretName: google-sa-secret
        - name: jwt-secret
          secret:
            secretName: jwt-secret
        - name: django-secret
          secret:
            secretName: django-secret
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: easytensor
    service: backend
  ports:
    - protocol: TCP
      port: 8000
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-migrations
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
      service: migrations
  template:
    metadata:
      labels:
        app: easytensor
        service: migrations
    spec:
      containers:
        - name: migrations
          image: easytensor/backend
          imagePullPolicy: IfNotPresent
          command: ["./migrate_app.sh"]
          volumeMounts:
            - name: gsa
              mountPath: "/app/gsa"
              readOnly: true
            - name: django-secret
              mountPath: "/app/secrets/django"
              readOnly: true
            - name: jwt-secret
              mountPath: "/app/secrets/jwt"
              readOnly: true
          envFrom:
            - configMapRef:
                name: backend-properties
            - secretRef:
                name: database-properties
            - configMapRef:
                name: service-routing
            - secretRef:
                name: email-properties
            - secretRef:
                name: stripe-properties
      volumes:
        - name: gsa
          secret:
            secretName: google-sa-secret
        - name: jwt-secret
          secret:
            secretName: jwt-secret
        - name: django-secret
          secret:
            secretName: django-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-controller
  labels:
    app: easytensor
    service: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
  template:
    metadata:
      labels:
        app: easytensor
        service: controller
    spec:
      serviceAccountName: deployment-control-sa
      containers:
        - name: controller
          image: easytensor/controller
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - stat
                - /app/healthy
          envFrom:
            - configMapRef:
                name: service-routing
            - configMapRef:
                name: controller-properties
            - configMapRef:
                name: mesh-account-cred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
      service: query
  template:
    metadata:
      labels:
        app: easytensor
        service: query
    spec:
      containers:
        - name: query
          image: easytensor/query
          ports:
            - name: http
              containerPort: 8080
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health_check/liveness/
              port: http
            failureThreshold: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health_check/readiness/
              port: http
            failureThreshold: 1
            periodSeconds: 3
          envFrom:
            - configMapRef:
                name: service-routing
            - configMapRef:
                name: mesh-account-cred
---
apiVersion: v1
kind: Service
metadata:
  name: query-service
spec:
  selector:
    app: easytensor
    service: query
  ports:
    - protocol: TCP
      port: 8080
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-reporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
      service: reporter
  template:
    metadata:
      labels:
        app: easytensor
        service: reporter
    spec:
      serviceAccountName: deployment-control-sa
      containers:
        - name: reporter
          image: easytensor/reporter
          ports:
            - name: http
              containerPort: 9090
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health_check/liveness/
              port: http
            failureThreshold: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health_check/readiness/
              port: http
            failureThreshold: 1
            periodSeconds: 3
          envFrom:
            - configMapRef:
                name: service-routing
            - configMapRef:
                name: reporter-properties
            - configMapRef:
                name: mesh-account-cred
---
apiVersion: v1
kind: Service
metadata:
  name: reporter-service
spec:
  selector:
    app: easytensor
    service: reporter
  ports:
    - protocol: TCP
      port: 9090
      name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-control-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-controller
rules:
  - apiGroups: ["apps", ""] # "apps" indicates pods api group
    resources: ["deployments", "services"]
    verbs: ["get", "watch", "list", "create", "update", "delete", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: control-deployments
  # namespace added as a patch
subjects:
  - kind: ServiceAccount
    name: deployment-control-sa
    # namespace added as a patch
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: deployment-controller # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
