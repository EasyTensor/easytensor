apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-tf-serve
  labels:
    app: easytensor
    service: tf-serve
spec:
  replicas: 0
  selector:
    matchLabels:
      app: easytensor
      service: tf-serve
  template:
    metadata:
      labels:
        app: easytensor
        service: tf-serve
    spec:
      containers:
        - name: tf-serve
          image: tensorflow/serving
          ports:
            - containerPort: 8500
            - containerPort: 8501
          imagePullPolicy: IfNotPresent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-upload
  labels:
    app: easytensor
    service: upload
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
  template:
    metadata:
      labels:
        app: easytensor
        service: upload
    spec:
      containers:
        - name: upload
          image: easytensor/upload
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1080
---
apiVersion: v1
kind: Service
metadata:
  name: upload-service
spec:
  selector:
    app: easytensor
    service: upload
  ports:
    - protocol: TCP
      port: 1080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-frontend
  labels:
    app: easytensor
    service: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
  template:
    metadata:
      labels:
        app: easytensor
        service: frontend
    spec:
      containers:
        - name: frontend
          image: easytensor/frontend
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: frontend-properties

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: easytensor
    service: frontend
  ports:
    - protocol: TCP
      port: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
      service: backend
  template:
    metadata:
      labels:
        app: easytensor
        service: backend
    spec:
      containers:
        - name: backend
          image: easytensor/backend
          ports:
            - name: http
              containerPort: 8000
          livenessProbe:
            httpGet:
              path: /health_check/
              port: http
            failureThreshold: 1
            periodSeconds: 10
            initialDelaySeconds: 5
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: gsa
              mountPath: "/app/gsa"
              readOnly: true
          envFrom:
            - configMapRef:
                name: backend-properties
      volumes:
        - name: gsa
          secret:
            secretName: google-service-account
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: easytensor
    service: backend
  ports:
    - protocol: TCP
      port: 8000
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: et-controller
  labels:
    app: easytensor
    service: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: easytensor
  template:
    metadata:
      labels:
        app: easytensor
        service: controller
    spec:
      serviceAccountName: deployment-control-sa
      containers:
        - name: controller
          image: easytensor/controller
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-control-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: dev
  name: deployment-controller
rules:
  - apiGroups: ["apps", ""] # "apps" indicates pods api group
    resources: ["deployments", "services"]
    verbs: ["get", "watch", "list", "create", "update", "delete", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: control-deployments
  namespace: dev
subjects:
  - kind: ServiceAccount
    name: deployment-control-sa
    namespace: dev
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: deployment-controller # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
